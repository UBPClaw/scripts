#TMSH-VERSION: 11.5.1

cli admin-partitions {
    update-partition Common
}
sys application template /Common/Mitchell1_VIP_Deployment {
    actions {
        definition {
            html-help {
            }
            implementation {
                tmsh::include "f5.app_utils"

tmsh::log_dest file
tmsh::log_level crit


proc tmsh_create { component arguments } {
    regsub -all {\"} $arguments "\\\"" arguments
    regsub -all {\[} $arguments "\\\[" arguments
    regsub -all {\]} $arguments "\\\]" arguments
    regsub -all {\$} $arguments "\\\$" arguments
    tmsh::run_proc f5.app_utils:do_tmsh_create "\"$component\"" "\"$arguments\""
}


if { $configuration__snat == "Yes" } {set snat "snat automap"} else {set snat "snat none"}

foreach portitem $::configuration__ports  {
if { [tmsh::get_field_value $portitem allowall] } {set ruleset "fw-rules replace-all-with \{ accept-all \{ rule-list accept-all \} \}"} else {set ruleset "fw-rules none"}
set members ""
set sslprofile ""
set profiles "profiles replace-all-with \{ tcp \{ \}\}"
if { [tmsh::get_field_value $portitem sslprofile] != "" } {set sslprofile "[tmsh::get_field_value $portitem sslprofile] \{  context clientside\} http \{ \} serverssl-insecure-compatible \{ context serverside\}"}
if { [tmsh::get_field_value $portitem port] == "80" } {set profiles "profiles replace-all-with \{ http \{ \} tcp \{ \} \} "}
if { [tmsh::get_field_value $portitem port] == "443" || [tmsh::get_field_value $portitem port] == "443" } {set profiles "profiles replace-all-with \{  tcp \{ \} $sslprofile\} "}
if { [tmsh::get_field_value $portitem port] == "21" } {set profiles "profiles replace-all-with \{ ftp \{ \} tcp \{ \}\} source-port change"}


	 foreach member $::configuration__backendservers  {
	    append members "[tmsh::get_field_value $member backendip]:[tmsh::get_field_value $portitem port]  \{ address [tmsh::get_field_value $member backendip]\}"
            }

         if { $configuration__monitoryesno == "Yes" } {   
	     tmsh_create "/ ltm pool" "$tmsh::app_name-[tmsh::get_field_value $portitem port] monitor [tmsh::get_field_value $portitem monitor]  members replace-all-with \{$members\}"
	 } else {
	     tmsh_create "/ ltm pool" "$tmsh::app_name-[tmsh::get_field_value $portitem port] monitor none  members replace-all-with \{$members\}"
	 }


	 if { $configuration__stagedeployment == "No" } {
	     if { $configuration__vipaddress_tw != "" } {tmsh_create "/ ltm virtual" "$tmsh::app_name-tw-[tmsh::get_field_value $portitem port] \{destination $configuration__vipaddress_tw:[tmsh::get_field_value $portitem port] ip-protocol tcp  $profiles   mask 255.255.255.255  $snat  pool $tmsh::app_name-[tmsh::get_field_value $portitem port]  translate-address enabled    translate-port enabled vlans-disabled $ruleset     security-log-profiles replace-all-with \{ LoggingProfile-NetworkFirewall-Allow&Drop&Reject \}\}"}
	     if { $configuration__vipaddress_internal != "" } {tmsh_create "/ ltm virtual" "$tmsh::app_name-[tmsh::get_field_value $portitem port] \{destination $configuration__vipaddress_tw:[tmsh::get_field_value $portitem port] ip-protocol tcp  $profiles   mask 255.255.255.255  $snat  pool $tmsh::app_name-[tmsh::get_field_value $portitem port]  translate-address enabled    translate-port enabled vlans-disabled $ruleset     security-log-profiles replace-all-with \{ LoggingProfile-NetworkFirewall-Allow&Drop&Reject \}\}"}

         } else {

	     if { $configuration__vipaddress_tw != "" } {
	          scan $configuration__vipaddress_tw %d.%d.%d.%d a b c d
	          tmsh_create "/ ltm virtual" "$tmsh::app_name-tw-[tmsh::get_field_value $portitem port] \{destination 172.21.70.$d:[tmsh::get_field_value $portitem port] ip-protocol tcp  $profiles   mask 255.255.255.255    pool $tmsh::app_name-[tmsh::get_field_value $portitem port] snat automap translate-address enabled    translate-port enabled vlans-disabled $ruleset     security-log-profiles replace-all-with \{ LoggingProfile-NetworkFirewall-Allow&Drop&Reject \}\}"
	     }

	     if { $configuration__vipaddress_internal != "" } {
	          scan $configuration__vipaddress_internal %d.%d.%d.%d a b c d
	          tmsh_create "/ ltm virtual" "$tmsh::app_name-[tmsh::get_field_value $portitem port] \{destination 172.21.71.$d:[tmsh::get_field_value $portitem port] ip-protocol tcp  $profiles   mask 255.255.255.255    pool $tmsh::app_name-[tmsh::get_field_value $portitem port] snat automap translate-address enabled    translate-port enabled vlans-disabled $ruleset     security-log-profiles replace-all-with \{ LoggingProfile-NetworkFirewall-Allow&Drop&Reject \}\}"
	     }

	     }

}
            }
            macro {
            }
            presentation {
                include "/Common/f5.apl_common"
 section welcome {
     message welcome "This iApp helps facilitate and manage the deployment of virtual servers at Mitchell 1."
     }



 section configuration {
 choice stagedeployment display "small" default "No" {"Yes", "No"}
 choice snat display "small" default "No" {"Yes", "No"}
 string vipaddress_tw display "medium" default "173.226.113."  validator "IpAddress"
 string vipaddress_internal display "medium"  validator "IpAddress"

	choice monitoryesno display "small" default "Yes" {"Yes", "No"}
 	table ports {
 		string port display "small" required validator "PortNumber"
                   choice allowall display "small" default "Yes" {"Yes", "No"}
                optional ( configuration.monitoryesno  == "Yes" ) {
                    choice monitor display "xlarge" default " " tcl { tmsh::run_proc f5.app_utils:get_ltm_monitors_filter http https tcp gateway icmp }

	        }
	        choice sslprofile display "xlarge" default " " tcl { 
                    set objs [tmsh::run_proc f5.app_utils:get_items /ltm profile client-ssl] 
                        foreach obj $objs { 
                                append results $obj
                                append results "\n"  
                        }
                    append results " \n"
                    return $results 
                    }     	
	    }

 	table backendservers {
 		string backendip display "medium" default "10.73.101." required validator "IpAddress"
 	}




 }

 text {
     welcome "Welcome to the Mitchell 1 VIP Builder"
     welcome.welcome "Introduction"
     configuration.ports.allowall "Accept All"
     configuration.stagedeployment "Stage this deployment (use temp IPs)" 
     configuration.vipaddress_tw "VIP Address TW" 
     configuration.vipaddress_internal "VIP Address Internal"
     configuration.ports "Listining on Ports"
     configuration.ports.port "Port"
     configuration.backendservers "Backend Pool Member Addresses"
     configuration.backendservers.backendip "IP Address"
     configuration.monitoryesno "Does this service require a monitor"
     configuration.ports.monitor "Monitor"
     configuration.ports.sslprofile "ClientSSL Profile"
     configuration.snat "Source NAT User when connecting to VIP"
}
            }
            role-acl none
            run-as none
        }
    }
    description none
    ignore-verification false
    requires-bigip-version-max none
    requires-bigip-version-min none
    requires-modules none
    signing-key none
    tmpl-checksum none
    tmpl-signature none
}
